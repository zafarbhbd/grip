# -*- coding: utf-8 -*-
"""Sol1. Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15T9UvWlbgzoMkC55sMNMHPcqpOEXhqno

# **The Spark Foundation**


**Graduate Rotational Internship Program**

**Data Science and Business Analytics**

# **Task 1**

# **Author: Abu Zafar**

## **Linear Regression with Python Scikit Learn**
In this section we will see how the Python Scikit-Learn library for machine learning can be used to implement regression functions. We will start with simple linear regression involving two variables.

### **Simple Linear Regression**
In this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries required in this notebook
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
# %matplotlib inline

# Reading data from remote link
url = "http://bit.ly/w-data"
data = pd.read_csv(url)
print("Data imported successfully")

data.head(10)

data.describe()

data.info()

"""Let's plot our data points on 2-D graph to eyeball our dataset and see if we can manually find any relationship between the data. We can create the plot with the following script:"""

# Plotting the distribution of scores
plt.scatter(x='Hours', y='Scores', data = data)
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

"""**From the graph above, we can clearly see that there is a positive linear relation between the number of hours studied and percentage of score.**

### **Preparing the data**

The next step is to divide the data into "attributes" (inputs) and "labels" (outputs).
"""

X = data.iloc[:, :-1].values
y = data.iloc[:, 1].values

"""Now that we have our attributes and labels, the next step is to split this data into training and test sets. We'll do this by using Scikit-Learn's built-in train_test_split() method:"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,
                            test_size=0.2, random_state=0)

"""### **Training the Algorithm**
We have split our data into training and testing sets, and now is finally the time to train our algorithm.
"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

print("Training complete.")

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""### **Making Predictions**
Now that we have trained our algorithm, it's time to make some predictions.
"""

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

# You can also test with your own data
hours = 9.25
own_pred = regressor.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""### **Evaluating the model**

The final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean square error. There are many such metrics.
"""

from sklearn import metrics
print('Mean Absolute Error:',
      metrics.mean_absolute_error(y_test, y_pred))

prediction_reg = regressor.predict(X_test)
regressor_mse = mean_squared_error(y_test, prediction_reg)
regressor_rmse = np.sqrt(regressor_mse)
r2_regressor_test = regressor.score(X_test, y_test)
r2_regressor_train = regressor.score(X_train, y_train)
print("\n\n RMSE of Regression Model: \t", regressor_rmse)
print("\n\n R-squared value of test data: \t", r2_regressor_test)
print("\n\n R-squared value of train data: \t", r2_regressor_test)

